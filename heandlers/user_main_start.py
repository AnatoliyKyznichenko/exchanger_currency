import asyncio
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from data.loader import *
from aiogram import types
from os import path
from data.config import *
from keyboards import *
from aiogram.dispatcher import FSMContext
from services.api_sqlite import *
import asyncio
from keyboards.user_menu import *
from services.api_sqlite import *
import re
from data.config import db

'''USD REAL DEFAULT 0,
                            EUR REAL DEFAULT 0,
                            PLN REAL DEFAULT 0,
                            GBP REAL DEFAULT 0,
                            CHF REAL DEFAULT 0,
                            CNY REAL DEFAULT 0,
                            CAD REAL DEFAULT 0'''


emoji_pattern = re.compile("["
        u"\U0001F600-\U0001F64F"  # emoticons
        u"\U0001F300-\U0001F5FF"  # symbols & pictographs
        u"\U0001F680-\U0001F6FF"  # transport & map symbols
        u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                           "]+", flags=re.UNICODE)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –í–∞—Å –≤—ñ—Ç–∞—î –∫–æ–º–ø–∞–Ω—ñ—è –ü–∞—Ä—Ç–Ω–µ—Ä.')
    await asyncio.sleep(2)
    await message.answer('üî• –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üî•', reply_markup=city_user)


@dp.message_handler(text='üèô –î–Ω—ñ–ø—Ä–æ')
async def curs_valute(message: types.Message):
    sale_carrency = [i for i in db.get_all_currency('sale').values()]
    buy_currency = [i for i in db.get_all_currency('buy').values()]
    zz = zip(['USD', 'EUR', 'PLN', 'GBP', 'CHF', 'CNY', 'CAD'], buy_currency, sale_carrency)
    result_string = ''
    result_string = ''.join([f'{i[0]}: {i[1]} - {i[2]}\n' for i in zz])
    await message.answer(result_string)
    await message.answer('üî• –ë–∞–∂–∞—î—Ç–µ –∫—É–ø–∏—Ç–∏ —á–∏ –ø—Ä–æ–¥–∞—Ç–∏ –≤–∞–ª—é—Ç—É ? üî•', reply_markup=buy_sale_menu)


@dp.message_handler(text='–°–∫–∞—Å—É–≤–∞—Ç–∏')
async def process_cancel(message: types.Message):
    await message.answer('üî• –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üî•', reply_markup=city_user)


@dp.message_handler(text='üî• –ö—É–ø–∏—Ç–∏ üî•')
async def number(message: types.Message):
    await storage.set_state(chat=message.chat.id, state='buy')
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É: ', reply_markup=currency_menu)


@dp.message_handler(state='buy')
async def moneta(message: types.Message, state: FSMContext):
    result = (emoji_pattern.sub(r'', message.text).strip())
    print(result)
    if result.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.answer('üî• –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üî•', reply_markup=city_user)
        await state.finish()
        return
    buy_coin = db.get_all_currency_dict('buy').get(result)
    print(buy_coin, type(buy_coin))
    if buy_coin is None:
        # await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É')
        return
    await message.answer(f'–ö—É—Ä—Å: {buy_coin}')
    await state.update_data(data={'valuta_buy': result})
    await state.set_state(state='summa_buy')
    await message.answer('‚ùì –ù–∞–ø–∏—à—ñ—Ç—å —Å—É–º—É, —è–∫—É —Ç—Ä–µ–±–∞ –∫—É–ø–∏—Ç–∏/–ø—Ä–æ–¥–∞—Ç–∏:', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state='summa_buy')
async def number(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        return
    await state.update_data(data={'adress_buy': amount})
    balance = await state.get_data()
    print(balance)
    await message.answer(f'C—É–º–º–∞: {balance["adress_buy"]}')
    await state.set_state(state='adress')
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:', reply_markup=adress_otdel)


@dp.message_handler(state='adress')
async def number(message: types.Message, state: FSMContext):
    await state.update_data(data={'otdel_buy': message.text})
    await state.set_state(state='number_phone')
    await message.answer('‚ùì –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:',
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state='number_phone')
async def end(message: types.Message, state: FSMContext):
    await state.update_data(data={'data': message.text})
    await state.set_state(state='data_buy')
    number = await state.get_data()
    await message.answer(f'–¢–µ–ª–µ—Ñ–æ–Ω: {number["data"]}')
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è!',
                         reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text='–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞')))
    await message.answer('https://maps.app.goo.gl/m45MNuZM5Zu3u14UA')
    await message.answer(f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ : {db.get_all_currency_dict("buy")[number["valuta_buy"]] * number["adress_buy"]}')
    data = await state.get_data()
    await bot.send_message(chat_id=id_channel, text="–ù–∞–¥—ñ–π—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É–ø—ñ–≤–ª—é\n"
                                                    f"–í–∞–ª—é—Ç–∞: {data['valuta_buy']}\n"
                                                    f"–°—É–º–∞ –∫—É–ø—ñ–≤–ª—ñ: {data['adress_buy']}\n"
                                                    f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {data['otdel_buy']}\n"
                                                    f"–ù–æ–º–µ—Ä –∫–ª—ñ—î–Ω—Ç–∞: {data['data']}")
    print(data)
    await state.finish()


@dp.message_handler(text='–°–∫–∞—Å—É–≤–∞—Ç–∏')
async def cancel(message: types.Message):
    await message.answer('üî• –ë–∞–∂–∞—î—Ç–µ –∫—É–ø–∏—Ç–∏ —á–∏ –ø—Ä–æ–¥–∞—Ç–∏ –≤–∞–ª—é—Ç—É ? üî•', reply_markup=buy_sale_menu)


'''–ü—Ä–æ–¥–∞–∂–∞'''


@dp.message_handler(text='üî• –ü—Ä–æ–¥–∞—Ç–∏ üî•')
async def number(message: types.Message):
    await storage.set_state(chat=message.chat.id, state='sale')
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É: ', reply_markup=currency_menu)


@dp.message_handler(state='sale')
async def moneta(message: types.Message, state: FSMContext):
    result = (emoji_pattern.sub(r'', message.text).strip())
    print(result)
    if result.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.answer('üî• –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üî•', reply_markup=city_user)
        await state.finish()
        return
    coin_ = db.get_all_currency_dict('sale').get(result)
    print(result)
    if coin_ is None:
        return
    await message.answer(f'–ö—É—Ä—Å: {coin_}')
    await state.update_data(data={'valuta_sale': result})
    await state.set_state(state='summa_sale')
    await message.answer('‚ùì –ù–∞–ø–∏—à—ñ—Ç—å —Å—É–º—É, —è–∫—É —Ç—Ä–µ–±–∞ –∫—É–ø–∏—Ç–∏/–ø—Ä–æ–¥–∞—Ç–∏:', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state='summa_sale')
async def number(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        return
    await state.update_data(data={'adress_sale': amount})
    balance_sale = await state.get_data()
    print(balance_sale)
    await message.answer(f'C—É–º–º–∞: {balance_sale["adress_sale"]}')
    await state.set_state(state='adress_sale')
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:', reply_markup=adress_otdel)


@dp.message_handler(state='adress_sale')
async def number(message: types.Message, state: FSMContext):
    await state.update_data(data={'otdel_sale': message.text})
    await state.set_state(state='number_phone_sale')
    await message.answer('‚ùì –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:',
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state='number_phone_sale')
async def end(message: types.Message, state: FSMContext):
    await state.update_data(data={'data_sale': message.text})
    await state.set_state(state='data_sale')
    number_sale = await state.get_data()
    await message.answer(f'–¢–µ–ª–µ—Ñ–æ–Ω: {number_sale["data_sale"]}')
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è!',
                         reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text='–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞')))
    await message.answer('https://maps.app.goo.gl/m45MNuZM5Zu3u14UA')
    await message.answer(f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ : {db.get_all_currency_dict("sale")[number_sale["valuta_sale"]] * number_sale["adress_sale"]}')
    data = await state.get_data()
    await bot.send_message(chat_id=id_channel, text="–ù–∞–¥—ñ–π—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂\n"
                                                    f"–í–∞–ª—é—Ç–∞: {data['valuta_sale']}\n"
                                                    f"–°—É–º–∞ –ø—Ä–æ–¥–∞–∂—É: {data['adress_sale']}\n"
                                                    f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {data['otdel_sale']}\n"
                                                    f"–ù–æ–º–µ—Ä –∫–ª—ñ—î–Ω—Ç–∞: {data['data_sale']}")
    print(data)
    await state.finish()


@dp.message_handler(text='–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞')
async def new_order(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –í–∞—Å –≤—ñ—Ç–∞—î –∫–æ–º–ø–∞–Ω—ñ—è –ü–∞—Ä—Ç–Ω–µ—Ä.',
                         reply_markup=types.ReplyKeyboardRemove())
    await asyncio.sleep(2)
    await message.answer('üî• –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ üî•', reply_markup=city_user)


@dp.message_handler(text='–°–∫–∞—Å—É–≤–∞—Ç–∏')
async def cancel(message: types.Message):
    await message.answer('üî• –ë–∞–∂–∞—î—Ç–µ –∫—É–ø–∏—Ç–∏ —á–∏ –ø—Ä–æ–¥–∞—Ç–∏ –≤–∞–ª—é—Ç—É ? üî•', reply_markup=buy_sale_menu)


